
package Vistas;

import entidades.Alumno;
import AccesoADatos.*;
import entidades.Inscripcion;
import entidades.Materia;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


public class ActualizacionDeNotas extends javax.swing.JInternalFrame {
private DefaultTableModel modelo = new DefaultTableModel();
InscripcionData indata = new InscripcionData();
AlumnoData aludata = new AlumnoData();
MateriaData matedata = new MateriaData();
    /**
     * Creates new form ActualizacionDeNotas
     */
    public ActualizacionDeNotas() {
        initComponents();
        llenarCombo();
        armarCabecera();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jBGuardar = new javax.swing.JButton();
        jbSalir = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jcbAlumnos = new javax.swing.JComboBox();

        setResizable(true);
        setTitle("Manupulacion de notas");

        jPanel1.setBackground(java.awt.SystemColor.activeCaption);

        jLabel1.setFont(new java.awt.Font("Courier New", 1, 24)); // NOI18N
        jLabel1.setText("Carga de notas");

        jLabel2.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        jLabel2.setText("Alumno");

        jBGuardar.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        jBGuardar.setText("Guardar");
        jBGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBGuardarActionPerformed(evt);
            }
        });

        jbSalir.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        jbSalir.setText("Salir");
        jbSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalirActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTable2.setGridColor(new java.awt.Color(51, 153, 255));
        jScrollPane2.setViewportView(jTable2);

        jcbAlumnos.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccione Alumno" }));
        jcbAlumnos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbAlumnosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(139, 139, 139)
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jcbAlumnos, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(27, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(185, 185, 185)
                .addComponent(jBGuardar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbSalir)
                .addGap(35, 35, 35))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jcbAlumnos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBGuardar)
                    .addComponent(jbSalir))
                .addContainerGap(65, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalirActionPerformed
        // TODO add your handling code here:
         this.dispose();
    }//GEN-LAST:event_jbSalirActionPerformed

    private void jcbAlumnosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbAlumnosActionPerformed
        borrarFilas();
        llenarTabla();
        
    }//GEN-LAST:event_jcbAlumnosActionPerformed

    private void jBGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBGuardarActionPerformed
      //seleccion de fila
      
        int fila = jTable2.getSelectedRow();//getSelectedRow obtiene indice de la fila, empieza de 0
       if(fila != -1){
          //declaracion de variables para enviar al metodo actualizar nota
          int i = jTable2.getSelectedRow();
          double nota = Double.parseDouble(jTable2.getModel().getValueAt(i, 2).toString());
           System.out.println("nota "+nota);
          //los datos se guardan en objeto TableModel del jTable                                       
          //getValueAt devuelve el valor de la celda(row,column),como devuelve un Object ponemos toString para pasarlo a 
          
                         //if para que la nota este enter 1 y 10
//           if (nota < 1 || nota > 10) {
//               JOptionPane.showMessageDialog(null, "La nota debe estar entre 1 y 10");
//
//           } else {
               //declaracion de variables para enviar al metodo actualizar nota.
               
//               String nombre = jcbAlumnos.getSelectedItem().toString();
//               int idAlumno = buscarAlumno(nombre);
//               int idMateria = Integer.parseInt(jTable2.getModel().getValueAt(i, 0).toString());
//
//               //metodo para actualizar nota
//               indata.actualizarNota(idAlumno, idMateria, nota);
//             }
          }else{
                  JOptionPane.showMessageDialog(null, "Debe seleccionar ");
          }
//        indata.actualizarNota(WIDTH, WIDTH, WIDTH); //idAlumno,iDMateria, nota
        // AlumnoData ald = new AlumnoData();
// MateriaData mD1 = new MateriaData();
// InscripcionData inData = new InscripcionData();
// 
// Alumno aluTazo = ald.buscarAlumno(1);//tazo
// Materia liter = mD1.buscarMateria(2); //LITERATURA
// Inscripcion insc = new Inscripcion(aluTazo,liter,4);
// inData.actualizarNota(1, 2, 10);

    }//GEN-LAST:event_jBGuardarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBGuardar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    private javax.swing.JButton jbSalir;
    private javax.swing.JComboBox jcbAlumnos;
    // End of variables declaration//GEN-END:variables
public void llenarCombo(){
//Guarda en la base
    for(Alumno alu:aludata.listarAlumnos()){ //LISTAR ALUMNOS
        jcbAlumnos.addItem(alu);
    }
}

private void borrarFilas(){
  int filas=jTable2.getRowCount()-1;
  for(;filas>=0;filas--){
  modelo.removeRow(filas);
  }
}
private void armarCabecera(){
    ArrayList<Object>titulo = new ArrayList();
 titulo.add("CÃ³digo");
 titulo.add("Nombre");
 titulo.add("Nota");
 for(Object tit:titulo){
 modelo.addColumn(tit);
 }
 jTable2.setModel(modelo);
 
  }

private void llenarTabla(){
    
             Alumno alumnoSeleccionado = (Alumno)jcbAlumnos.getSelectedItem();
                
           
            List<Inscripcion> inscrip= indata.obtenerInscripcionesPorAlumno(alumnoSeleccionado.getIdAlumno());
            for(Inscripcion i:inscrip){
                modelo.addRow(new Object[]{i.getAlumno().getIdAlumno(),i.getMateria(),i.getNota()});
            }
        }

    
}
